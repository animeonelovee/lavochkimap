# Generated by Django 4.1.5 on 2023-04-08 00:28

import clientside.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('photo', models.ImageField(blank=True, default='user_photo/av.jpg', null=True, upload_to=clientside.models.user_directory_path, verbose_name='Фото')),
                ('name', models.CharField(blank=True, max_length=15, verbose_name='Имя')),
                ('email_verify', models.BooleanField(default=False, verbose_name='Проверено')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lavochki',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField(verbose_name='Долгота')),
                ('y', models.FloatField(verbose_name='Широта')),
                ('description', models.TextField(verbose_name='Описание')),
                ('is_padik', models.BooleanField(blank=True, default=None, null=True, verbose_name='Возле подъезда')),
                ('is_spinka', models.BooleanField(blank=True, default=None, null=True, verbose_name='Спинка')),
                ('is_ten', models.BooleanField(blank=True, default=None, null=True, verbose_name='В тени')),
                ('date_added', models.DateTimeField(auto_now=True, verbose_name='Дата добавление')),
                ('is_valid', models.BooleanField(default=False, verbose_name='Проверено')),
                ('is_edit', models.BooleanField(default=False, verbose_name='На редактирование')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='RatingStar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.SmallIntegerField(default=0, verbose_name='Звезда рейтинга')),
            ],
            options={
                'ordering': ['-value'],
            },
        ),
        migrations.CreateModel(
            name='PhotoLav',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.ImageField(upload_to=clientside.models.lav_directory_path, verbose_name='Фото')),
                ('alt', models.CharField(blank=True, max_length=250, null=True, verbose_name='Описание')),
                ('is_valid', models.BooleanField(default=False, verbose_name='Проверено')),
                ('lav_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clientside.lavochki', verbose_name='ID лавочки')),
            ],
        ),
        migrations.CreateModel(
            name='Marks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now=True, verbose_name='Дата добавления')),
                ('lavochka_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clientside.lavochki', verbose_name='Лавочка')),
                ('rating', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clientside.ratingstar', verbose_name='Оценка')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
    ]
